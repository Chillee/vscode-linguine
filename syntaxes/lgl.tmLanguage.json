{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Linguine",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#types"
        },
        {
            "include": "#functions"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.lgl",
                    "match": "\\b(break|case|continue|default|discard|do|else|for|if|return|switch|while)\\b"
                },
                {
                    "match": "(==|!=|<=|>=|<>|<|>)",
                    "name": "keyword.operator.comparison"
                },
                {
                    "name": "keyword.operator.arithmetic",
                    "match": "(\\-|\\+|\\*|\\/|%)"
                },
                {
                    "name": "keyword.operator.assignment",
                    "match": "(=)"
                },
                {
                    "name": "support.function",
                    "match": "\\b(abs|acos|all|any|asin|atan|ceil|clamp|cos|cross|degrees|dFdx|dFdy|distance|dot|equal|exp|exp2|faceforward|floor|fract|ftransform|fwidth|greaterThan|greaterThanEqual|inversesqrt|length|lessThan|lessThanEqual|log|log2|matrixCompMult|max|min|mix|mod|noise[1-4]|normalize|not|notEqual|outerProduct|pow|radians|reflect|refract|shadow1D|shadow1DLod|shadow1DProj|shadow1DProjLod|shadow2D|shadow2DLod|shadow2DProj|shadow2DProjLod|sign|sin|smoothstep|sqrt|step|tan|texture1D|texture1DLod|texture1DProj|texture1DProjLod|texture2D|texture2DLod|texture2DProj|texture2DProjLod|texture3D|texture3DLod|texture3DProj|texture3DProjLod|textureCube|textureCubeLod|transpose)\\b"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.lgl",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.lgl",
                    "match": "\\\\."
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line",
                    "match": "//(.*)"
                },
                {
                    "name": "comment.block",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.numeric",
                    "match": "\\b([0-9]+\\.?[0-9]*)|(\\.[0-9]+)\\b"
                },
                {
                    "name": "constant.language",
                    "match": "\\b(true|false|NULL|TRUE|FALSE)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "storage.type",
                    "match": "\\b(void|bool|int|uint|float|double|vec[2|3|4]|dvec[2|3|4]|bvec[2|3|4]|ivec[2|3|4]|uvec[2|3|4]|mat[2|3|4]|mat2x2|mat2x3|mat2x4|mat3x2|mat3x3|mat3x4|mat4x2|mat4x3|mat4x4|dmat2|dmat3|dmat4|dmat2x2|dmat2x3|dmat2x4|dmat3x2|dmat3x3|dmat3x4|dmat4x2|dmat4x3|dmat4x4|sampler[1|2|3]D|image[1|2|3]D|samplerCube|imageCube|sampler2DRect|image2DRect|sampler[1|2]DArray|image[1|2]DArray|samplerBuffer|imageBuffer|sampler2DMS|image2DMS|sampler2DMSArray|image2DMSArray|samplerCubeArray|imageCubeArray|sampler[1|2]DShadow|sampler2DRectShadow|sampler[1|2]DArrayShadow|samplerCubeShadow|samplerCubeArrayShadow|isampler[1|2|3]D|iimage[1|2|3]D|isamplerCube|iimageCube|isampler2DRect|iimage2DRect|isampler[1|2]DArray|iimage[1|2]DArray|isamplerBuffer|iimageBuffer|isampler2DMS|iimage2DMS|isampler2DMSArray|iimage2DMSArray|isamplerCubeArray|iimageCubeArray|atomic_uint|usampler[1|2|3]D|uimage[1|2|3]D|usamplerCube|uimageCube|usampler2DRect|uimage2DRect|usampler[1|2]DArray|uimage[1|2]DArray|usamplerBuffer|uimageBuffer|usampler2DMS|uimage2DMS|usampler2DMSArray|uimage2DMSArray|usamplerCubeArray|uimageCubeArray|struct)\\b"
                },
                {
                    "name": "storage.type",
                    "match": "\\b(tag|is)\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "begin": "([A-Za-z_$][\\w$]*)(?:<.*>)?\\s*(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function"
                        }
                    },
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "text.lgl"
                        }
                    ]
                }
            ]
        }
    },
    "scopeName": "text.lgl"
}