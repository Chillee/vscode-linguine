{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Linguine",
    "scopeName": "text.lgl",
    "patterns": [
		{
			"match": "\\b(with)\\s+([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*((<[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*>)(\\.[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)?)?)\\s+([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)\\s*:",
			"captures": {
				"1": {"name": "keyword.other.gator"},
				"2": {"name": "storage.type.gator"},
				"4": {"name": "constant.language.gator"},
				"6": {"name": "variable.other.gator"}
			}
		},
		{
			"match": "(?<=declare)\\s+([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*((<[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*>)(\\.[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)?)?)\\s+([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)\\s*;",
			"captures": {
				"1": {"name": "storage.type.gator"},
				"3": {"name": "constant.language.gator"},
				"5": {"name": "variable.other.gator"}
			}
		},
		{
			"match": "(?<=(^|;|\\buniform|\\bvarying|\\bcanon|\\battribute))\\s+([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*((<[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*>)(\\.[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)?)?)\\s+([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)\\s*(?=(;|=[^=]))",
			"captures": {
				"1": {"name": "keyword.other.gator"},
				"2": {"name": "storage.type.gator"},
				"4": {"name": "constant.language.gator"},
				"6": {"name": "variable.other.gator"}
			}
		},
		{
			"name": "constant.other.gator",
			"match": "^#\\\".*\\\";$"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#multilinecomment"
		},
		{
			"include": "#funcdecl"
		},
		{
			"name": "comment.line.double-slash",
			"match": "\/\/.*"
		},
		{
			"name": "constant.language.gator",
			"match": "\\b(true|false)\\b"
		},
		{
			"name": "constant.numeric.gator",
			"match": "(\\b|-)(\\d+[\".\"]?|((\\d*[\".\"]\\d+)|(\\d+[\".\"]\\d*)))"
		},
		{
			"name": "invalid.illegal.gator",
			"match": "\\b(break|continue|do|while|inout|lowp|mediump|highp|precision|invariant|discard|asm|class|union|enum|typedef|template|packed|goto|switch|default|inline|noinline|volatile|public|static|extern|external|interface|flat|long|short|double|half|fixed|unsigned|superp|input|output|sizeof|cast|namespace|struct)\\b"
		},
		{
			"name": "keyword.control.gator",
			"match": "\\b(if|else|elif|for|skip|return)\\b"
		},
		{
			"name": "markup.bold.gator",
			"match": "\\bin\\b|\\bas!"
		},
		{
			"name": "keyword.other.gator",
			"match": "\\b(using|prototype|type|is|has|with|out|declare|dimension|canon|const|uniform|varying|attribute)\\b"
		},
		{
			"name": "storage.type.gator",
			"match": "\\b(object|coordinate|frame|int|float|string|auto|bool|void|this)\\b"
		},
		{
			"match": "(?<=type)\\s+([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*((<[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*>)(\\.[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)?)?)\\s+(is)\\s+([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*((<[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*>)(\\.[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)?)?)",
			"captures": {
				"1": {"name": "storage.type.gator"},
				"3": {"name": "constant.language.gator"},
				"5": {"name": "keyword.other.gator"},
				"6": {"name": "storage.type.gator"},
				"8": {"name": "constant.language.gator"}
			}
		},
		{
			"match": "(?<=\\bas!)\\s+([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*((<[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*>)(\\.[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)?)?)",
			"captures": {
				"1": {"name": "storage.type.gator"},
				"3": {"name": "constant.language.gator"}
			}
		},
		{
			"name": "support.function.gator",
			"match": "\\b(print|genType)\\b"
		},
		{
			"match": "\\b([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)\\s*\\(",
			"captures": {
				"1": {"name": "constant.other.gator"}
			}
		},
		{
			"name": "variable.other.gator",
			"match": "(?<=\\b)([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)(?=\\b)"
		}
	],
    "repository": {
		"strings": {
			"name": "string.quoted.double.gator",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.gator",
					"match": "\\\\."
				}
			]
		},
		"multilinecomment": {
			"name": "comment.block.gator",
			"begin": "\\/\\*",
			"end": "\\*\\/",
			"patterns": []
		},
		"funcdecl": {
			"begin" : "(^|;|\\}|(declare|canon))\\s*([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*((<[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*>)(\\.[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)?)?)\\s+([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)\\s*\\(",
			"captures": {
				"2": {"name": "keyword.other.gator"},
				"3": {"name": "storage.type.gator"},
				"5": {"name": "constant.language.gator"},
				"7": {"name": "constant.other.gator"}
			},
			"end": "\\)",
			"patterns": [
				{
					"match": "(canon)?(\\s*([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*((<[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*>)(\\.[a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)?)?))\\s+([a-z,A-Z,_][a-z,A-Z,\\d,_,\\.]*)(?=(\\)|\\,))",
					"captures": {
						"1": {"name": "keyword.other.gator"},
						"2": {"name": "storage.type.gator"},
						"4": {"name": "constant.language.gator"},
						"6": {"name": "variable.other.gator"}
					}
				}
			]
		}
	}
}